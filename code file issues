//libaries needed //starting base

import tweepy     
import pandas as pd

//consumer keys

//authtication using twitters api

auth = tweepy.OAuthHandler(consumer_key,consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)      
//end of starting base all code intro will likely be this

//getting multiple tweets from specific user, setting parametters to include tweets, # likes of tweets, time stamp of tweet

number_of_tweets=20 <== call for specified amount of tweets
tweets = []
likes = []
time = []

//cursor function for getting likes,time, tweets //note the display is alater from his code because his code didnt work so i made it simplier but does not divde into coloums

for i in tweepy.Cursor(api.user_timeline, id='channelkeeks',tweet_mode="extended").items(number_of_tweets):
    tweets.append(i.full_text)
likes.append(i.favorite_count)
time.append(i.created_at)

// sets paramters to get likes,time, tweets from specified user
df = tweets,time,likes

//prints user likes,time, tweet // note there is am unexpected id exception thrown for the call of 20 or more tweets 

df

// to call tweets using word assocition

//libaries required

import tweepy
import pandas as pd

// consumer keys

// authoriation using twitter api

auth = tweepy.OAuthHandler(consumer_key,consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

// cursour function for keyword search for 2 different functions

//search_tweets gives random generated tweet, throws an error for a label requirement, unsure what to set as label, tried username & it still generates a random tweet, requires q (instead of fully written query will throw error)

cursor = tweepy.Cursor(api.search_tweets,q="mental health",label="" ,tweet_mode="extended").items(1)

//search_full_archive with label set to username "channelkeeks" throws forbidden error saying Authentication succeeded but account is not authorized to access this resource,requires the use of query ( instead of slang q will throw error)

cursor = tweepy.Cursor(api.search_full_archive,query="mental health",label="channelkeeks" ,tweet_mode="extended").items(1)

when done without set user defined by label ( still unsure what the function label is) throws error Sorry, that page does not exist, also throws error for label requirement

cursor = tweepy.Cursor(api.search_full_archive,query="mental health",label="" ,tweet_mode="extended").items(1)

// print results from keyword search
for i in cursor:
    print(i.full_text)

//code for search tweets success run based on single word association aka depressed

//insert starting base code

// define what you/re calling in this case number of tweets (this case i set to 10), tweets themselves, time stamp of tweet, defined q (querey) as depressed the word i am search

number_of_tweets = 10
tweets = []
time = []
q = 'depressed'

// calling for multi tweets, // successfully displays 10 tweets with the use of the word depressed, //issues found it doesnt display the time stamp, display also includes retweets, display also includes some @ing someone with the word depressed in their @,also displays use of a poll

for i in tweepy.Cursor(api.search_tweets, q,tweet_mode="extended").items(number_of_tweets):
    tweets.append(i.full_text)
time.append(i.created_at)

// printing it out

// for basic print just write 

tweets

// creation of data frame to print //valueError thrown doesnt display time or tweets

df = pd.DataFrame({"time":time,"tweets":tweets})

// tried this way instead just caping T in time the call worked although still doesnt display exact time just the date of the tweet no longer get the value error cal

df = pd.DataFrame({'tweets':tweets,'Time':Time})

// print

df

// further diggiing i did a call for just time & only one single date displayed, no time stamp but the call is to dispaly the time for over 20 tweets

df = pd.DataFrame({"time":time})

// same call for just the tweets & it shows the number display of tweets with the word sad in the tweetand the singe array worked

df = pd.DataFrame({"tweets":tweets})

// call to remove all RTs from data // successfully removes all RTs from data set

df = df[(~df.tweets.str.contains('RT'))]

// call to reset index so numbers match tweets

df = df.reset_index(drop=True)

// print

df





